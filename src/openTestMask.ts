import { posix as path } from "path";
import os from "os";
import * as fs from "fs";
import cp from "child_process";

import { logger } from "./Logger";
const print = (...args: any) => logger.log(__filename, ...args);

class TestMask {
    public executionPath = "";

    private findExcecutionPath() {}

    public open(projectMaskJson) {
        if (!projectMaskJson || !fs.existsSync(projectMaskJson)) {
            console.log("project missing");
            return;
        }

        // console.log(fs.existsSync(testMaskPath));
        print("opening", process.platform, this.executionPath, projectMaskJson);
        if (process.platform === "win32") {
            if (this.executionPath === "") {
                print("no excection path");
                return false;
            }
            cp.execFile(this.executionPath, ["-console"]);
        } else {
            print("open not implemented");
            return false;
        }

        return true;
    }

    updateExecutionPath(newExecutionPath: string) {
        // todo : check is executable
        if (!fs.existsSync(newExecutionPath)) {
            print(`execution path does not exist : ${newExecutionPath}`);
            return false;
        }
        if (!newExecutionPath.endsWith(".exe")) {
            print(`exection path need to be executable`);
            return false;
        }
        this.executionPath = newExecutionPath;
        return true;
    }
}

export const testMask = new TestMask();
